/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module lua.functions;

private {
    import core.stdc.stdarg;
    import lua.types;
}

extern(C) @nogc nothrow {
    //lua.h
    alias da_lua_newstate = lua_State* function(lua_Alloc, void*);
    alias da_lua_close = void function(lua_State*);
    alias da_lua_newthread = lua_State* function(lua_State*);
    alias da_lua_atpanic = lua_CFunction function(lua_State*, lua_CFunction);
    alias da_lua_version = const(lua_Number)* function(lua_State*);
    alias da_lua_absindex = int function(lua_State*, int);
    alias da_lua_gettop = int function(lua_State*);
    void lua_settop(lua_State*, int);
    alias da_lua_pushvalue = void function(lua_State*, int);
    void lua_rotate(lua_State*, int, int);
    void lua_copy(lua_State*, int, int);
    alias da_lua_checkstack = int function(lua_State*, int);
    alias da_lua_xmove = void function(lua_State*, lua_State*, int);
    alias da_lua_isnumber = int function(lua_State*, int);
    alias da_lua_isstring = int function(lua_State*, int);
    alias da_lua_iscfunction = int function(lua_State*, int);
    alias da_lua_isinteger = int function(lua_State*, int);
    alias da_lua_isuserdata = int function(lua_State*, int);
    int lua_type(lua_State*, int);
    const(char)* lua_typename(lua_State*, int);
    lua_Number lua_tonumberx(lua_State*, int, int*);
    lua_Integer lua_tointegerx(lua_State*, int, int*);
    alias da_lua_toboolean = int function(lua_State*, int);
    const(char)* lua_tolstring(lua_State*, int, size_t*);
    alias da_lua_rawlen = size_t function(lua_State*, int);
    alias da_lua_tocfunction = lua_CFunction function(lua_State*, int);
    alias da_lua_touserdata = void* function(lua_State*, int);
    alias da_lua_tothread = lua_State* function(lua_State*, int);
    alias da_lua_topointer = const(void)* function(lua_State*, int);
    alias da_lua_arith = void function(lua_State*, int);
    alias da_lua_rawequal = int function(lua_State*, int, int);
    alias da_lua_compare = int function(lua_State*, int, int, int);
    alias da_lua_pushnil = void function(lua_State*);
    alias da_lua_pushnumber = void function(lua_State*, lua_Number);
    alias da_lua_pushinteger = void function(lua_State*, lua_Integer);
    alias da_lua_pushlstring = const(char)* function(lua_State*, const(char)*, size_t);
    const(char)* lua_pushstring(lua_State*, const(char)*);
    alias da_lua_pushvfstring = const(char)* function(lua_State*, const(char)*, va_list);
    alias da_lua_pushfstring = const(char)* function(lua_State*, const(char)*, ...);
    void lua_pushcclosure(lua_State*, lua_CFunction, int);
    alias da_lua_pushboolean = void function(lua_State*, int);
    alias da_lua_pushlightuserdata = void function(lua_State*, void*);
    alias da_lua_pushthread = int function(lua_State*);
    alias da_lua_getglobal = int function(lua_State*, const(char)*);
    alias da_lua_gettable = int function(lua_State*, int);
    int lua_getfield(lua_State*, int, const(char)*);
    alias da_lua_geti = int function(lua_State*, int, lua_Integer);
    alias da_lua_rawget = int function(lua_State*, int);
    int lua_rawgeti(lua_State*, int, int);
    alias da_lua_rawgetp = int function(lua_State*, int, const(void)*);
    void lua_createtable(lua_State*, int, int);
    alias da_lua_newuserdata = void* function(lua_State*, size_t);
    alias da_lua_getmetatable = int function(lua_State*, int);
    alias da_lua_getuservalue = int function(lua_State*, int);
    void lua_setglobal(lua_State*, const(char)*);
    alias da_lua_settable = void function(lua_State*, int);
    alias da_lua_setfield = void function(lua_State*, int, const(char)*);
    alias da_lua_rawset = void function(lua_State*, int);
    alias da_lua_rawseti = void function(lua_State*, int, lua_Integer);
    alias da_lua_rawsetp = void function(lua_State*, int, const(void)*);
    alias da_lua_setmetatable = int function(lua_State*, int);
    alias da_lua_setuservalue = void function(lua_State*, int);
    void lua_callk(lua_State*, int, int, lua_KContext, lua_KFunction);
    int lua_pcallk(lua_State*, int, int, int, lua_KContext, lua_KFunction);
    alias da_lua_load = int function(lua_State*, lua_Reader, void*, const(char)*, const(char)*);
    alias da_lua_dump = int function(lua_State*, lua_Writer, void*, int);
    int lua_yieldk(lua_State*, int, lua_KContext, lua_KFunction);
    alias da_lua_resume = int function(lua_State*, lua_State*, int);
    alias da_lua_status = int function(lua_State*);
    alias da_lua_isyieldable = int function(lua_State*);
    alias da_lua_gc = int function(lua_State*, int, int);
    alias da_lua_error = int function(lua_State*);
    alias da_lua_next = int function(lua_State*, int);
    alias da_lua_concat = void function(lua_State*, int);
    alias da_lua_len = void function(lua_State*, int);
    alias da_lua_stringtonumber = size_t function(lua_State*, const(char)*);
    alias da_lua_getallocf = lua_Alloc function(lua_State*, void**);
    alias da_lua_setallocf = void function(lua_State*, lua_Alloc, void*);
    alias da_lua_getstack = int function(lua_State*, int, lua_Debug*);
    alias da_lua_getinfo = int function(lua_State*, const(char)*, lua_Debug*);
    alias da_lua_getlocal = const(char)* function(lua_State*, const(lua_Debug)*, int);
    alias da_lua_setlocal = const(char)* function(lua_State*, const(lua_Debug)*, int);
    alias da_lua_getupvalue = const(char)* function(lua_State*, int, int);
    alias da_lua_setupvalue = const(char)* function(lua_State*, int, int);
    alias da_lua_upvalueid = void* function(lua_State*, int, int);
    alias da_lua_upvaluejoin = void function(lua_State*, int, int, int, int);
    alias da_lua_sethook = void function(lua_State*, lua_Hook, int, int);
    alias da_lua_gethook = lua_Hook function(lua_State*);
    alias da_lua_gethookmask = int function(lua_State*);
    alias da_lua_gethookcount = int function(lua_State*);

    //lauxlib.h
    void luaL_checkversion_(lua_State*, lua_Number, size_t);
    alias da_luaL_getmetafield = int function(lua_State*, int, const(char)*);
    alias da_luaL_callmeta = int function(lua_State*, int, const(char)*);
    alias da_luaL_tolstring = const(char)* function(lua_State*, int, size_t*);
    alias da_luaL_argerror = int function(lua_State*, int, const(char)*);
    const(char)* luaL_checklstring(lua_State*, int, size_t*);
    const(char)* luaL_optlstring(lua_State*, int, const(char)*, size_t*);
    alias da_luaL_checknumber = lua_Number function(lua_State*, int);
    alias da_luaL_optnumber = lua_Number function(lua_State*, int, lua_Number);
    alias da_luaL_checkinteger = lua_Integer function(lua_State*, int);
    alias da_luaL_optinteger = lua_Integer function(lua_State*, int, lua_Integer);
    alias da_luaL_checkstack = void function(lua_State*, int, const(char)*);
    alias da_luaL_checktype = void function(lua_State*, int, int);
    alias da_luaL_checkany = void function(lua_State*, int);
    alias da_luaL_newmetatable = int function(lua_State*, const(char)*);
    alias da_luaL_setmetatable = void function(lua_State*, const(char)*);
    alias da_luaL_testudata = void* function(lua_State*, int, const(char)*);
    alias da_luaL_checkudata = void* function(lua_State*, int, const(char)*);
    alias da_luaL_where = void function(lua_State*, int);
    alias da_luaL_error = int function(lua_State*, const(char)*, ...);
    alias da_luaL_checkoption = int function(lua_State*, int, const(char)*);
    alias da_luaL_fileresult = int function(lua_State*, int, const(char)*);
    alias da_luaL_execresult = int function(lua_State*, int);
    alias da_luaL_ref = int function(lua_State*, int);
    alias da_luaL_unref = void function(lua_State*, int, int);
    int luaL_loadfilex(lua_State*, const(char)*, const(char)*);
    int luaL_loadbufferx(lua_State*, const(char)*, size_t, const(char)*, const(char)*);
    int luaL_loadstring(lua_State*, const(char)*);
    alias da_luaL_newstate = lua_State* function();
    alias da_luaL_len = lua_Integer function(lua_State*, int);
    alias da_luaL_gsub = const(char)* function(lua_State*, const(char)*, const(char)*, const(char)*);
    void luaL_setfuncs(lua_State*, const luaL_Reg*, int);
    alias da_luaL_getsubtable = int function(lua_State*, int, const(char)*);
    alias da_luaL_traceback = void function(lua_State*, lua_State*, const(char)*, int);
    alias da_luaL_requiref = void function(lua_State*, const(char)*, lua_CFunction, int);
    alias da_luaL_buffinit = void function(lua_State*, luaL_Buffer*);
    alias da_luaL_prepbuffsize = char* function(luaL_Buffer*, size_t);
    alias da_luaL_addlstring = void function(luaL_Buffer*, const(char)*, size_t);
    alias da_luaL_addstring = void function(luaL_Buffer*, const(char)*);
    alias da_luaL_addvalue = void function(luaL_Buffer*);
    alias da_luaL_pushresult = void function(luaL_Buffer*);
    alias da_luaL_pushresultsize = void function(luaL_Buffer*, size_t);
    alias da_luaL_buffinitsize = char* function(lua_State*, luaL_Buffer*, size_t);
    alias da_luaL_pushmodule = void function(lua_State*, const(char)*, int);
    alias da_luaL_openlib = void function(lua_State*, const(char)*, const(luaL_Reg)*, int);
    //lualib.h
    alias da_luaopen_base = int function(lua_State*);
    alias da_luaopen_coroutine = int function(lua_State*);
    alias da_luaopen_table = int function(lua_State*);
    alias da_luaopen_io = int function(lua_State*);
    alias da_luaopen_os = int function(lua_State*);
    alias da_luaopen_string = int function(lua_State*);
    alias da_luaopen_utf8 = int function(lua_State*);
    alias da_luaopen_bit32 = int function(lua_State*);
    alias da_luaopen_math = int function(lua_State*);
    alias da_luaopen_debug = int function(lua_State*);
    alias da_luaopen_package = int function(lua_State*);
    alias da_luaL_openlibs = void function(lua_State*);
}
